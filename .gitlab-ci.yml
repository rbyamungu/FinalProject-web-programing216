image: mcr.microsoft.com/dotnet/sdk:latest

stages:
  - build
  - test
  - deploy

variables:
  OBJECTS_DIRECTORY: 'obj'
  NUGET_PACKAGES_DIRECTORY: '.nuget'
  SOURCE_CODE_PATH: 'HalfAndHalf/'
  DEPLOY_PATH: '/home/${DEPLOY_USER}/FinalProject'
  ANSIBLE_PROJECT_PATH: 'ansible_project'
  ANSIBLE_HOST_KEY_CHECKING: 'False'

before_script:
  - apt-get update && apt-get install -y openssh-client sshpass
  - cd ${SOURCE_CODE_PATH}
  - dotnet restore --packages ${NUGET_PACKAGES_DIRECTORY}

build:
  stage: build
  script:
    - dotnet build --no-restore
    - dotnet publish -c Release -o ../publish
  artifacts:
    paths:
      - publish/
      - dockerfile
      - ${ANSIBLE_PROJECT_PATH}/
      - nrc-20250203.sql
      - ansible_project/inventory/hosts
      - ansible_project/templates/*
      - ansible_project/playbooks/*

tests:
  stage: test
  script:
    - dotnet test --no-restore

deploy:
  stage: deploy
  script:
    # Enhanced SSH setup with proper error handling
    - |
      mkdir -p ~/.ssh
      chmod 700 ~/.ssh
      echo "$SSH_PRIVATE_KEY_HALF_SVR0" | tr -d '\r' > ~/.ssh/id_rsa
      chmod 600 ~/.ssh/id_rsa
      
      # Scan all hosts based on inventory
      for server in $(grep -E "^half-server-[0-9]" ${ANSIBLE_PROJECT_PATH}/inventory.ini | cut -d' ' -f1); do
        host_ip=$(grep $server ${ANSIBLE_PROJECT_PATH}/inventory.ini | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
        if [ ! -z "$host_ip" ]; then
          ssh-keyscan -H $host_ip >> ~/.ssh/known_hosts
          ssh-keyscan -H $server >> ~/.ssh/known_hosts
        fi
      done
      chmod 644 ~/.ssh/known_hosts

    # Create archive excluding development files
    - |
      TEMP_DIR=$(mktemp -d)
      cp -r . $TEMP_DIR/
      cd $TEMP_DIR
      tar --exclude='*.git' \
          --exclude='obj' \
          --exclude='bin' \
          --exclude='project.tar.gz' \
          --exclude='*.tmp' \
          --exclude='.gitlab-ci' \
          --exclude='node_modules' \
          --exclude='leftover' \
          --exclude='*.log' \
          --exclude='HalfAndHalf/obj' \
          --exclude='HalfAndHalf/bin' \
          --exclude='HalfAndHalf/wwwroot/lib' \
          -czf /tmp/project.tar.gz .

    # Deploy and run Ansible playbooks
    - |
      ssh ${DEPLOY_USER}@$DEPLOY_HOST0 "
        mkdir -p ${DEPLOY_PATH} && \
        cd ${DEPLOY_PATH} && \
        git pull && \
        echo 'Successfully pulled from main branch' && \
        export ANSIBLE_HOST_KEY_CHECKING=False && \
        ansible-playbook -i ${ANSIBLE_PROJECT_PATH}/inventory.ini ${ANSIBLE_PROJECT_PATH}/playbooks/ping.yml && \
        if [ $? -eq 0 ]; then
          echo 'Ping test successful, proceeding with deployment' && \
          ansible-playbook -i ${ANSIBLE_PROJECT_PATH}/inventory.ini ${ANSIBLE_PROJECT_PATH}/playbooks/ping.yml && \
          ansible-playbook -i ${ANSIBLE_PROJECT_PATH}/inventory.ini ${ANSIBLE_PROJECT_PATH}/playbooks/ping.yml && \
          ansible-playbook -i ${ANSIBLE_PROJECT_PATH}/inventory.ini ${ANSIBLE_PROJECT_PATH}/playbooks/ping.yml
        else
          echo 'Ping test failed, aborting deployment'
          exit 1
        fi
      "
  only:
    - main
  environment:
    name: production
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure