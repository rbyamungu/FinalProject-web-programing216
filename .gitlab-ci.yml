image: mcr.microsoft.com/dotnet/sdk:latest

stages:
  - build
  - test
  - deploy

variables:
  OBJECTS_DIRECTORY: 'obj'
  NUGET_PACKAGES_DIRECTORY: '.nuget'
  SOURCE_CODE_PATH: 'HalfAndHalf/'
  DEPLOY_PATH: '/home/${DEPLOY_USER}/FinalProject'
  ANSIBLE_PROJECT_PATH: 'ansible_project'

#restore the nuget packeges
before_script:
  - cd ${SOURCE_CODE_PATH}
  - dotnet restore --packages ${NUGET_PACKAGES_DIRECTORY}

build:
  stage: build
  script:
    - dotnet build --no-restore
    - dotnet publish -c Release -o ../publish
  artifacts:
    paths:
      - publish/
      - dockerfile
      - ${ANSIBLE_PROJECT_PATH}/
      - nrc-20250203.sql

tests:
  stage: test
  script:
    - dotnet test --no-restore

deploy:
  stage: Deploy
  image: ubuntu:latest
  before_script:
    - apt-get update -y
    - DEBIAN_FRONTEND=noninteractive apt-get install -y openssh-client
  script:
    # Setup SSH access
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_PRIVATE_KEY_HALF_SVR0" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $DEPLOY_HOST0 >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    # Create archive in a clean temporary directory
    - TEMP_DIR=$(mktemp -d)
    - cp -r . $TEMP_DIR/
    - cd $TEMP_DIR
    - tar --exclude='*.git' 
        --exclude='obj' 
        --exclude='bin' 
        --exclude='project.tar.gz'
        --exclude='*.tmp'
        --exclude='.gitlab-ci'
        -czf /tmp/project.tar.gz .

    # Deploy to control node (half-server-0)
    - ssh ${DEPLOY_USER}@$DEPLOY_HOST0 "mkdir -p ${DEPLOY_PATH}"
    - scp /tmp/project.tar.gz ${DEPLOY_USER}@$DEPLOY_HOST0:${DEPLOY_PATH}/
    
    # Extract and trigger Ansible deployment
    - |
      ssh ${DEPLOY_USER}@$DEPLOY_HOST0 "
        cd ${DEPLOY_PATH} && 
        tar xzf project.tar.gz && 
        rm project.tar.gz &&
        cd ${ANSIBLE_PROJECT_PATH} &&
        ansible-playbook -i inventory.ini playbooks/deploy_dotnet_app.yml
      "
  only:
    - main
  environment:
    name: production