// <auto-generated />
using System;
using HalfAndHalf.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HalfAndHalf.Migrations.ApplicationDb
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HalfAndHalf.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePhotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HalfAndHalf.Models.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompanyId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("company_name");

                    b.Property<string>("OrgType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("org_type");

                    b.HasKey("CompanyId");

                    b.ToTable("company", "public");
                });

            modelBuilder.Entity("HalfAndHalf.Models.Incident", b =>
                {
                    b.Property<int>("Seqnos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("seqnos");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Seqnos"));

                    b.Property<string>("CallType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("call_type");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime?>("DateTimeComplete")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_time_complete");

                    b.Property<DateTime>("DateTimeReceived")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_time_received");

                    b.Property<string>("DescriptionOfIncident")
                        .HasColumnType("text")
                        .HasColumnName("description_of_incident");

                    b.Property<int?>("FatalityCount")
                        .HasColumnType("integer")
                        .HasColumnName("fatality_count");

                    b.Property<int?>("HospitalizationCount")
                        .HasColumnType("integer")
                        .HasColumnName("hospitalization_count");

                    b.Property<string>("IncidentCause")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("incident_cause");

                    b.Property<int?>("IncidentTrainId")
                        .HasColumnType("integer")
                        .HasColumnName("incident_train_id");

                    b.Property<int?>("InjuryCount")
                        .HasColumnType("integer")
                        .HasColumnName("injury_count");

                    b.Property<int?>("RailroadId")
                        .HasColumnType("integer")
                        .HasColumnName("railroad_id");

                    b.Property<string>("ResponsibleCity")
                        .HasColumnType("text")
                        .HasColumnName("responsible_city");

                    b.Property<string>("ResponsibleState")
                        .HasColumnType("text")
                        .HasColumnName("responsible_state");

                    b.Property<string>("ResponsibleZip")
                        .HasColumnType("text")
                        .HasColumnName("responsible_zip");

                    b.Property<string>("TypeOfIncident")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type_of_incident");

                    b.HasKey("Seqnos");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IncidentTrainId");

                    b.HasIndex("RailroadId");

                    b.ToTable("incident", "public");
                });

            modelBuilder.Entity("HalfAndHalf.Models.IncidentTrain", b =>
                {
                    b.Property<int>("TrainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("train_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TrainId"));

                    b.Property<string>("NameNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_number");

                    b.Property<int?>("RailroadId")
                        .HasColumnType("integer")
                        .HasColumnName("railroad_id");

                    b.Property<string>("TrainType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("train_type");

                    b.HasKey("TrainId");

                    b.HasIndex("RailroadId");

                    b.ToTable("incident_train", "public");
                });

            modelBuilder.Entity("HalfAndHalf.Models.IncidentTrainCar", b =>
                {
                    b.Property<int>("TrainCarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("train_car_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TrainCarId"));

                    b.Property<string>("CarContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("car_content");

                    b.Property<string>("CarNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("car_number");

                    b.Property<string>("CarType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("car_type");

                    b.Property<int?>("IncidentTrainId")
                        .HasColumnType("integer")
                        .HasColumnName("incident_train_id");

                    b.Property<int?>("PositionInTrain")
                        .HasColumnType("integer")
                        .HasColumnName("position_in_train");

                    b.HasKey("TrainCarId");

                    b.HasIndex("IncidentTrainId");

                    b.ToTable("incident_train_car", "public");
                });

            modelBuilder.Entity("HalfAndHalf.Models.Railroad", b =>
                {
                    b.Property<int>("RailroadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("railroad_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RailroadId"));

                    b.Property<string>("RailroadName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("railroad_name");

                    b.HasKey("RailroadId");

                    b.ToTable("railroad", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HalfAndHalf.Models.Incident", b =>
                {
                    b.HasOne("HalfAndHalf.Models.Company", "Company")
                        .WithMany("Incidents")
                        .HasForeignKey("CompanyId");

                    b.HasOne("HalfAndHalf.Models.IncidentTrain", "IncidentTrain")
                        .WithMany("Incidents")
                        .HasForeignKey("IncidentTrainId");

                    b.HasOne("HalfAndHalf.Models.Railroad", "Railroad")
                        .WithMany("Incidents")
                        .HasForeignKey("RailroadId");

                    b.Navigation("Company");

                    b.Navigation("IncidentTrain");

                    b.Navigation("Railroad");
                });

            modelBuilder.Entity("HalfAndHalf.Models.IncidentTrain", b =>
                {
                    b.HasOne("HalfAndHalf.Models.Railroad", "Railroad")
                        .WithMany("IncidentTrains")
                        .HasForeignKey("RailroadId");

                    b.Navigation("Railroad");
                });

            modelBuilder.Entity("HalfAndHalf.Models.IncidentTrainCar", b =>
                {
                    b.HasOne("HalfAndHalf.Models.IncidentTrain", "IncidentTrain")
                        .WithMany("TrainCars")
                        .HasForeignKey("IncidentTrainId");

                    b.Navigation("IncidentTrain");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HalfAndHalf.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HalfAndHalf.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HalfAndHalf.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HalfAndHalf.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HalfAndHalf.Models.Company", b =>
                {
                    b.Navigation("Incidents");
                });

            modelBuilder.Entity("HalfAndHalf.Models.IncidentTrain", b =>
                {
                    b.Navigation("Incidents");

                    b.Navigation("TrainCars");
                });

            modelBuilder.Entity("HalfAndHalf.Models.Railroad", b =>
                {
                    b.Navigation("IncidentTrains");

                    b.Navigation("Incidents");
                });
#pragma warning restore 612, 618
        }
    }
}
